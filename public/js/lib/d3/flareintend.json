{
 "name": "数据类型",
 "children": [
  {
   "name": "原始类型",
   "children": [
    {
     "name": "数字",
     "children": [
      {"name": "Javascript不区分整数值和和浮点数值, Javascript中的所有数值都用浮点数值表示。", "size": 3938},
      {"name": "当一个数字出现在JS程序中的时候，我们称之为数字直接量", "size": 3812},
      {"name": "除了十进制的整形直接量，JS也能识别十六进制。所谓的十六进制是以 0x 或者 0X 为前缀，后面跟着十六进制数串。", "size": 6714},
      {"name": "浮点型直接量由整数部分，小数点，小数部分组成。可以使用指数计数法。例如：6.02e23; 1.473E-23", "size": 743},
	  {"name": "算术运算符",
	   "children": [
			{"name": "基本运算符：+；-；*；/；%；"},
			{"name": "复杂的算术运算: 通过作为Math对象的属性定义的函数和常量来实现。比如：Math.pow(2,53) //2的53次幂; Math.max(x,y,z) //返回最大值"},
			{"name": "Javascript预定义了全局变量：Infinity （无穷大）和 NaN（非数字值）。数字运算的结果超过了JS所能表示的数字的上限的时候，用Infinty表示"},
			{"name": "0除以0是没有意义的，用NaN来表示。无穷大除以无穷大、给任意的负数作开方运算，或者算术运算符与不是数字或无法转换成数字的操作符运算的时候，返回的都是NaN"},
			{"name": "Javascript中NaN（非数字值）是非常特殊的值：它和任何值都不相等,包括自身。也就是说没办法通过 x==NaN来判断x是否是NaN。需要用x!=x来判断，当且仅当x为NaN的时候，表达式为true."},
			{"name": "二进制浮点数和四舍五入错误：Javascript采用IEEE-754浮点数表示法，这是一种二进制浮点数表示法，可以精确的表示分数。"},
			{"name": "我们日常生活常用的是十进制的分数。二进制表示法无法精确的表示类似0.1这样的简单数字。"},
			{"name": "由于舍入的误差，会带来一些意向不到的问题。例如： var x=.3-.2; var y =.2-.1; x==y; //false; x==.1; //false; y==.1; //true"}
	   ]
	  }
     ]
    },
    {
     "name": "字符串",
     "children": [
      {"name": "Javascript通过字符串来表示文本。字符串是一组由16位值组成的不可变的有序序列", "size": 3534},
      {"name": "字符串的长度是16位值的个数。字符串的索引从0开始，第一个字符的位置是0，第二个字符的位置是1。", "size": 5731},
      {"name": "字符串直接量：由单引号或者双引号括起来的字符序列。", "size": 7840},
      {"name": "ES3中字符串必须在一行；ES5中规定字符串可以可以拆分成数行，每行以\\结束。如果，希望在字符串里另起一行需要用转义字符\\n", "size": 5914},
      {"name": "转义字符：在javascript字符串中，反斜杠\\具有特殊的意义。反斜杠后面加上一个字符，就不再表示它们的字面含义了。", "size": 3416},
	  {"name": "比如：当需要在一个用单引号做定界符的字符串里面使用撇号的时候，转义字符就非常有用了。例如：'You \\'re right.'", "size": 3416},
	  {"name": "字符串的使用", 
	   "children": [
			{"name": "字符串的连接使用加号运算符+，例如：msg = 'hello,'+'world'; \\\\生成hello, world"},
			{"name": "确定字符串的长度,可以使用字符串的length属性。比如：s.length可以得到字符串s的长度"},
			{"name": "字符串还提供了很多可以调用的方法。比如：s.replace('h','H')，记住：JS中字符串都是固定不变的，这些方法返回的都是新的字符串，原来的字符串保持不变"},
			{"name": "ES5中字符串可以当做只读数组。可以使用方括号来访问字符串中的单个字符。例如：s =\"hello, world\"; s[0] \\\\ 就是h"}
	   ]}
     ]
    },
    {
     "name": "布尔值",
     "children": [
      {"name": "这个类型只有两个值：true, false。Javascript程序中比较语句的结果通常都是布尔值。例如：a==4；如果变量a等于4，结果就是true", "size": 7074},
	  {"name": "布尔值通常用于javascript中的控制结构中，比如：if/else语句中。"},
	  {"name": "任意javascript值都可以转换为布尔值。下面这些值可以转换为false: undefined;null;0;-0;NaN;空字符串。其他所有值，包括对象都会转换为true。"},
	  {"name": "三个重要的布尔运算符：&&（与）；||（或）；！（非）"}
     ]
    },
	{
     "name": "null",
     "children": [
       {"name": "null是javascript的一个关键字，用来描述空值。", "size": 7074},
	   {"name": "对null执行typeof预算，返回字符串object。也就是说：可以将null认为是一个特殊的对象值,含义是非对象。", "size": 7074},
	   {"name": "null是自有类型的唯一一个成员，它可以表示数字、字符串、对象是无值的。", "size": 7074}
     ]
    },
	{
     "name": "undefined",
     "children": [
      {"name": "Javascript中第二个用来表述值的空缺的值。它是变量的一种取值，用来表示变量没有初始化。", "size": 7074},
	  {"name": "对undefined执行typeof预算，返回undefined。表明这个值是这个类型的唯一成员。", "size": 7074},
	  {"name": "undefined是预定义的一个全局变量，这个全局变量的值就是未定义。（null与它不同，是关键字。）", "size": 7074},
	  {"name": "如果查询数组元素或者对象属性的时候，返回undefined，则说明这个元素或属性不存在。", "size": 7074}
     ]
    },
	{
     "name": "null和undefined异同",
     "children": [
      {"name": "null是关键字；undefined是一个预定义的全局变量", "size": 7074},
	  {"name": "尽管二者不同，但它们都表示值的空缺，两者往往可以互换。判断相等的运算符==，认为两者是相等的。", "size": 7074},
	  {"name": "要想区分两者，需要用严格相等运算符===", "size": 7074},
	  {"name": "两者都不包含任何的属性和方法", "size": 7074},
	  {"name": "可以把undefined看做系统级的，出乎意料的或者类似是错误的那种空缺。而null看做是程序级别的，正常的或者意料之中的空缺。", "size": 7074},
	  {"name": "如果想把它们赋值给变量或属性，或者当做函数的参数的时候，最好使用null", "size": 7074}
     ]
    }
   ]
  },
  {
   "name": "对象类型",
   "children": [
    {"name": "对象", 
	 "children": [
      {"name": "命名值的无序集合", "size": 1983}
     ]	
	},
    {"name": "数组", 
	 "children": [
      {"name": "带编号的值的有序集合", "size": 1983}
     ]
	},
    {
     "name": "函数",
     "children": [
      {"name": "函数是具有与它相关联的可执行代码的对象，通过调用函数来运行代码，并返回运行结果", "size": 1983}
     ]
    }
   ]
  }
 ]
}